type List = Cons(Integer, List) | Nil()

def range(from : Integer, to : Integer) : List =>
   if from == to then
     List.Nil()
   else
     List.Cons(from, range(from + 1)(to))

def print_list(list : List) : Text =>
  case list {
    of List.Nil() => "[]"
    of List.Cons(h, t) => "[" ++ int_to_string(h) ++ print_helper(t) ++ "]"
  }

def print_helper(list : List) : Text =>
  case list {
    of List.Nil() => ""
    of List.Cons(h, t) => ", " ++ int_to_string(h) ++ print_helper(t)
  }

def filter(f : Integer -> Bool, list : List) : List =>
  case list {
    of List.Nil() => list
    of List.Cons(h, t) =>
      if f(h) then
        List.Cons(h, filter(f)(t))
      else
        filter(f)(t)
  }

let is_even = fn x => (x / 2) * 2 == x in
let list = range(0)(read_int("To")) in
let filtered = filter(is_even)(list) in
let _ = print(print_list(filtered)) in
0
